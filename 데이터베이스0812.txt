데이터 베이스 모델링

현실 세계의 업무적인 프로세스를 물리적으로 데이터 베이스화 시키기 위한 과정이다.

모델링 단계별 요약					
	3-1) 개념적 데이터베이스 모델링				
		현실 세계를 개념화, 추출			
		Entity, Attiribute, Relation을 추출			
	3-2) 논리적 데이터베이스 모델링				
		Entity -> Table			
		Attribute -> Column			
		맵핑 룰(Mapping Rule) 적용			
		정규화			
	3-3) 물리적 데이터베이스 모델링				
		실 DBMS를 선정			
		최적화			
		역정규화			
		성능 고려 튜닝		

스키마 --
1. 스키마는 데이터베이스의 구조와 제약 조건에 관한 전반적인 명세를 기술한 메타데이터의 집합이다.

2. 스키마는 데이터베이스를 구성하는 데이터 개체(Entity), 속성(Attribute), 관계(Relationship) 및 데이터 조작 시 데이터 값들이 갖는 제약 조건 등에 관해 전반적으로 정의한다.

3. 스키마는 사용자의 관점에 따라 외부 스키마, 개념 스키마, 내부 스키마로 나눠진다.

-- 개념적 데이터베이스 모델링이란?					
	업무 분석 단계에서 얻어진 내용을 토대로				
	우선 엔티티(Entity)를 추출하고 엔티티내의 어트리뷰트(Attribute)				
	를 구성하며, 엔티티간의 관계를 정리해서				
	ER-Diagram으로 정의하는 단계이다.				

-- E-R Model(Entity - Relation Model, 개체-관계 모델)					

엔티티(Entity)
1) 명사-동사 분석법						
	명사중에 큰 개념 -> Entity					
	명사중에 작은 개념 -> Attribute					
2) 개별단어들의 공통 집합						
	자료구조, 데이터베이스, C, Java  : 과목					
	컴공, 경영, 국문, 영문, 행정, 한의: 학과					
3) 관련 지식 공부						
	해당 조직 특성 공부					
	회계, 업무 관련 서적					
4) 서류, DB						
5) "학원에서 학생들의 출결상태와 성적등을 과목별로						
     관리하기를 원하고 있다"						
   명사 : 학원, 학생, 출결상태, 성적, 과목						
    학원이 여러 개인지 아니면 그냥 그 학원에서만 관리						
   앞에 해당하면 학원도 Entity, 뒤에 해당하면 No Entity						
6) 모델링에서 상상력을 동원하는 것은 매우 중요하다						
   그러나 모델링 작업시 실제 업무에 있는 실체인지						
   아닌지 검증해야 한다.						
   Entity명을 부여할 때 실무에서 자주쓰는 용어, 명사를						
   사용하여 가독성을 높이는 것이 좋다						

속성(Attribute)
	Entity(실체)를 이루는 구체적인 항목				
	성질, 분류, 수량, 상태, 특성, 특징…				
				
	엔티티당 대략 10개 내외로 하는 게 좋다.				
	그 이상으로 많이 나오면 엔티티의 분리를 고려				

관계(Relation)
	Entity간의 업무적인 연관성이다.

1.ER Diagram을 그리세요.

1)회사는 4개의 부서를 운영한다. 부서는(부서번호,부서이름)을 저장한다.
2)부서는 1명 이상의 직원(직원번호, 직원이름, 직책)을 두고 있다.
   각 직원은 한개의 부서에 소속된다.
3)직원은 부양가족(이름,나이)가 있을수 있다.
4)각 직원은 근무했던 부서에 대한 근무기록(기간,직책)이 있다.

2.ER Diagram을 그리세요.
1) A 회사는 직원들이 사용하는 주차건물에 주차장이 여러 개 있다.
2)각 주차장은 주차장 이름, 위치,주차대수, 주차층 정보로 구성된다.
3) 각 주차장의 주차공간은 일련번호가 붙은 주차공간으로 구성되어 있다.
4)직원은 지정주차 공간을 요청할수 있다.
    직원은 직원번호, 이름, 구내전화번호, 운전면허정보 정보로 구성된ㄷ나.

3.다음은 현업 담당자와의 면담 자료이다.

지금까지 알아본 개념을 바탕으로 다음에서 실체와 주요 속성을 추출해 다이어그램을 그리시오

"나는 교육센터의 관리자이다 우리는 여러과정을 가르치는데, 각 과정은 코드,이름 및 수강료를 갖고있다.
 'java'와'db'는 인기있는 과정이다.
과정들은 1일 ~4일간으로 기간은 다양하다.
홍길동과 임꺽정은 우리의 가장 훌륭한 강사들이다.
우리는 각 강사의 이름과 전화번호를 필요로 한다.
학생들은 시간에 따라 여러 개의 과정을 이수 할수 있는데 많은 학생들이 이렇게 하고 있다.
우리는 각 학생들의 이름과 전화번호를 알고싶다. "

--부모테이블인 DEPT테이블부터 생성하자

CREATE TABLE dept(
    dno VARCHAR2(2),
    dname VARCHAR2(14),
    loc VARCHAR2(8),
    director VARCHAR2(4),
    CONSTRAINT dept_dno_pk PRIMARY KEY (dno)
    );

CREATE TABLE emp(
    eno VARCHAR2(4),
    ename VARCHAR2(10),
    job VARCHAR2(6),
    mgr VARCHAR2(4),
    hdate DATE,
    sal NUMBER,
    comm NUMBER,
    dno VARCHAR2(2),
   CONSTRAINT emp_eno_pk PRIMARY KEY(eno),
   CONSTRAINT emp_dno_fk FOREIGN KEY(dno) REFERENCES dept(dno)
   );


CREATE TABLE emp4(
  2  eno VARCHAR2(4),
  3  ename VARCHAR2(50) CONSTRAINT emp_ename_nu NOT NULL,
  4  gno VARCHAR2(13),
  5  sex VARCHAR2(3),
  6  CONSTRAINT emp4_eno_pk PRIMARY KEY(eno),
  7  CONSTRAINT emp4_gno_uk UNIQUE (gno),
  8  CONSTRAINT emp4_gno_ch CHECK (LENGTH(gno)=13),
  9  CONSTRAINT emp4_sex_ch CHECK (sex IN('여','남'))
 10  );

--<제약 조건의 이해와 설정 1> (PK, FK)
-- 제약 조건이란 테이블 단위에서 데이터의 무결성을 보장해주는
-- 규칙이다. 제약 조건은 테이블에 데이터가 입력, 수정, 삭제시
-- 또는 테이블이 삭제, 변경될 경우 잘못된 트랜잭션이 수행되지
-- 않도록 결함을 유발할 가능성이 있는 작업을 방지하는 역할을
-- 수행한다.
-- 특히 PK와 FK는 테이블의 필수 요소로써 모든 테이블은 이들
-- 둘 중 하나 이상을 반드시 포함하고 있다.
-- 
-- <제약 조건>
-- 1) 테이블 단위에서 정의되고 적용된다.
-- 2) 종속성이 존재하는 경우 테이블의 삭제를 막아준다.
--    (자식 테이블이 있는 부모 테이블은 삭제 불가.
--    자식 테이블부터 삭제하고 부모 테이블을 삭제해야 함)
-- 3) 자료가 삽입,갱신,삭제될 때마다 규칙이 적용된다.
-- 4) 일시적으로 활성화하거나 비활성화하는 것이 가능하다.
-- 5) USER_CONSTAINTS, USER_CONS_COLUMNS 딕셔너리에서
--   검색한다
-- 6) 제약조건은 개체처럼 관리되므로 반드시 이름이 필요하다.
--    제약조건에 이름을 정의하지 않으면 오라클 서버가
--    자동으로 SYS_Cn형태의 이름을 붙인다.
--    관리자가 규칙성 있는 이름을 붙여주는 것이 훨씬 좋다.
--    
--<오라클에서 제공되는 제약조건>
--PRIMARY KEY(PK) : 테이블에 반드시 지정해야 한다
--FOREIGN KEY(FK) : 자식 테이블은 반드시 지정해야 한다
--UNIQUE KEY(UK) : 유니크한 컬럼의 검색속도 향상
--NOT NULL       : PK는 무조건 NOT NULL, 타 컬럼 옵션
--CHECK          : 기타 조건
    
--1. PK 설정
--컬럼에 PK를 지정하는 방법은 아래처럼 2가지 방법이 있다.
--CREATE TABLE 테이블명(
--...
--CONSTRAINT 제약조건이름 PRIMARY KEY(컬럼));
--
--CREATE TABLE 테이블명(
--컬럼 데이터타입 CONSTRAINT 제약조건이름 PRIMARY KEY,
--...);
--
--1) 테이블을 생성할 때 PK를 정의한다
--2) PK는 각 행을 고유하게 식별하는 역할을 담당한다
--3) 테이블당 하나or 한개 그룹(복합키)만 정의 가능하다
--4) 지정된 컬럼에는 중복된 값이나 NULL 값이 입력불가하다
--5) PK로 지정 가능한 컬럼이 여러 개 있을 때는 검색에
--  많이 사용되고 간단하고 짧은 컬럼을 지정한다
--  (ex 사원 : 사번, 주민번호 중에 사번을 선택)
--6) 주 식별자, 주키 등으로 불린다
--7) 고유 인덱스(Unique Index)가 자동으로 생성된다.
--    
--2. FK 설정
--CREATE TABLE 테이블명(
--...
--CONSTRAINT 제약조건이름 FOREIGN KEY(컬럼)
--REFERENCES 부모테이블 (참조컬럼) [ON DELETE CASCADE]);
--
--CREATE TABLE 테이블명(
--컬럼명 데이터타입 CONSTRAINT 제약조건이름 FOREIGN KEY
--                REFERENCES 부모테이블 (참조컬럼)
--                [ON DELETE CASCADE],
--...);
-- 1) 부모 테이블을 참조하여 테이블을 생성할 때 FK를 정의한다
-- 2) FK가 정의된 테이블이 자식(하위) 테이블이다
-- 3) 참조되는 테이블을 부모(상위) 테이블이라고 한다
-- 4) 부모 테이블은 미리 생성되어 있어야 한다
-- 5) 부모 테이블의 참조되는 컬럼에 존재하는 값만을 입력할 
--    수 있다.
-- 6) 부모 테이블에 참조되는 행의 데이터는 FK를 위배하는
--    삭제나 변경이 불가능하다.
-- 7) ON DELETE CASCADE : 참조되는 부모 테이블의 행에 대한
--    DELETE 를 허용한다.
--    (부모 테이블의 행을 삭제하면 참조하는 자식테이블의 행도
--    함께 지워진다)
-- 8) 자료형이 반드시 부모테이블의 컬럼과 일치해야 한다
-- 9) 참조되는 컬럼은 PK이거나 UK(Unique Key)만 가능하다
-- 10) 외부키, 참조키, 외부식별자 등으로 불린다.
--   11) REFERENCES 'S'를 꼭 붙일 것
-- 
-- * 제약조건을 정의하는 방법은 2가지 방법이 제공된다.
--   1) 테이블 생성 명령어 마지막에 기술하는 방법
--      : 테이블 레벨 정의
--   2) 컬럼을 정의할 때 같이 정의하는 방법
--      : 컬럼 레벨 정의
--   둘 중에 테이블 레벨 정의가 가독성이 높다.
      
--기존 스크립트(*.sql)에는 의미적으로만 dno로 연결되었을 뿐
--제약조건이 없기 때문에 dept의 행을 지워도 에러가 안생겼음
--
--PK와 FK가 추가된 dept와 emp 테이블을 생성한다.   
DROP TABLE emp;
DROP TABLE dept;
PURGE RECYCLEBIN; -- Windows의 휴지통 비우기 기능과 동일
  
--부모 테이블인 dept 테이블부터 생성해야 한다      
CREATE TABLE dept(
  dno VARCHAR2(2),
  dname VARCHAR2(14),
  loc VARCHAR2(8),ㅇ
  director VARCHAR2(4),
  CONSTRAINT dept_dno_pk PRIMARY KEY (dno)
);
CREATE TABLE emp(
  eno VARCHAR2(4),
  ename VARCHAR2(10),
  job VARCHAR2(6),
  mgr VARCHAR2(4),
  hdate DATE,
  sal NUMBER,
  comm NUMBER,
  dno VARCHAR2(2),
  CONSTRAINT emp_eno_pk PRIMARY KEY(eno),
  CONSTRAINT emp_dno_fk FOREIGN KEY(dno)
                        REFERENCES dept (dno)
);

-- PK로 정의된 dept의 dno, emp의 eno 컬럼은 
--중복된 값 X, NULL X
-- FK로 정의된 emp의 dno는 dept의 dno를 참조하도록 
--설정했으므로, emp에 데이터를 입력할 때 fk가 존재하지 않는
--데이터를 입력하면 에러가 발생한다.

--dept와 emp에 데이터를 입력하고 제약조건 설정을 테스트
INSERT INTO dept (dno, dname, loc)
VALUES ('10', '개발', '서울');
INSERT INTO emp (eno, ename, dno)
VALUES ('2000', '김연아', '10');
COMMIT;

--PK에 이미 '10'번 부서가 있으므로 중복데이터 입력 방지
--PK에 대한 무결성을 '개체 무결성'이라 한다
INSERT INTO dept (dno, dname, loc)
VALUES ('10', '총무', '부산');
--FK값이 부모테이블에 존재하지 않으므로 입력 방지
--FK에 대한 무결성을 '참조 무결성'이라 한다
INSERT INTO emp (eno, ename, dno)
VALUES ('2001', '장나라', '20');


--<제약 조건의 이해와 설정2>
--; NOT NULL, UK, CHECK
--
--1) PK, FK를 제외한 나머지 제약조건
--2) 이들은 모든 테이블에 반드시 필요한 것은 아니다.
--   하지만 이를 통해 미리 프로세스상의 오류를 예방할 수 있다
--   
--<Unique Key 설정>
--CREATE TABLE 테이블명(
--  ...
--  CONSTRAINT 제약조건명 UNIQUE (컬럼)
--);
--
--CREATE TABLE 테이블명(
--  컬럼 데이터타입 CONSTRAINT 제약조건명 UNIQUE,
--...);
-- 1) UK(Unique Key)를 정의한다
-- 2) 중복된 값을 허용하지 않지만 여러개의 NULL 은 허용한다
--    - NULL 값은 비교가 불가능하므로 여러개라도 중복이
--     아니다.
-- 3) 고유키라고도 불린다
-- 4) 고유 인덱스(Unique Index)가 자동으로 생성된다.
-- 5) 사원 테이블의 사번, 주민번호 중에 사번은 PK,
--    주민번호는 UK 설정을 한다.
--    
--<NOT NULL 설정>
--CREATE TABLE 테이블명(
--  컬럼 데이터타입 CONSTRAINT 제약조건명 NOT NULL,
--  ...
--);
--1) 컬럼 레벨 정의만 가능하다
--2) 지정된 컬럼은 NULL 값을 허용하지 않는다
--3) 반드시 NULL 값이 필요한 컬럼을 제외하고
--  가능한 모든 컬럼에 NULL 값을 허용하지 않는 것이 좋다.
--    
--<CHECK 설정>
--CREATE TABLE 테이블명(
--  ...
--  CONSTRAINT 제약조건명 CHECK(조건)
--);
--
--CREATE TABLE 테이블명(
--  컬럼 데이터타입 CONSTRAINT 제약조건명 CHECK (조건),
--  ...
--);
-- 1) 행에 입력될 데이터의 조건을 정의한다
-- 2) 조건은 WHERE 절에 기술하는 조건형식과 동일하다.
-- 3) 어플리케이션에서 데이터의 조건을 체크하는 대신
--    테이블에서 조건을 체크하도록 하는 것이다.
--    (어플리케이션 코드양을 줄일 수 있다)
    
--emp4 테이블을 생성한다
CREATE TABLE emp4(
  eno VARCHAR2(4),
  ename VARCHAR2(50) CONSTRAINT emp_ename_nu NOT NULL,
  gno VARCHAR2(13),
  sex VARCHAR2(3),
  CONSTRAINT emp4_eno_pk PRIMARY KEY (eno),
  CONSTRAINT emp4_gno_uk UNIQUE (gno),
  CONSTRAINT emp4_gno_ch CHECK (LENGTH(gno)=13),
  CONSTRAINT emp4_sex_ch CHECK (sex IN ('여', '남'))
);

--정상 조건을 만족할 때 잘 입력됨
INSERT INTO emp4 (eno, ename, gno, sex)
VALUES ('1001', '장나라', '2001222233811', '여');

--NOT NULL 컬럼에 NULL 을 입력한 경우
INSERT INTO emp4 (eno, ename, gno, sex)
VALUES ('1002', NULL, '1901222233811', '여');

--gno(주민번호) 중복시
INSERT INTO emp4 (eno, ename, gno, sex)
VALUES ('1002', '김나라', '2001222233811', '여');

--'여'/'남' 대신 'M'을 넣을 때
INSERT INTO emp4 (eno, ename, gno, sex)
VALUES ('1012', '박나라', '1801222233811', 'M');

SELECT * FROM emp4;


VARCHAR2 를 사용하는 이유는 VARCHAR이 추후 변경될수 있다고 
오라클에서 VARCHAR2를 사용하라고 권장
현재는 기능차이 없음.

























































