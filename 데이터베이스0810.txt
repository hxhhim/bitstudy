--그룹 함수와 Having 절
--그룹 함수를 포함한 조건을 일반 조건과 계산하는 시점이 다르다.
--일반 조건의 경우 컬럼의 값을 단지 조건과 비교하면 되지만
--그룹 함수의 결과를 조건으로 하는 경우 GROUP BY 절의 
--사용 유무에 따라 결과 값이 달라진므로 조건에 그룹함수가 
--포함된 경우 이것은 일반 조건과 동일한 시점에 처리할 수 없다.
--SQL 은 이를 위해 HAVING 절을 제공한다.
--HAVING 절은 조건 중에 그룹함수가 포함된 것만을 모아서 기술하는 구문이다.

--SELECT 컬럼 OR 그룹함수...
--FROM 테이블
--WHERE 일반 조건
--GROUP BY 그룹 대상
--HAVING 그룹함수 포함 조건
--ORDER BY 정렬 대상;
--1)HAVING : 조건 중에 그룹함수를 포함하는 조건 기술
--2)HAVING절은 GROUP BY 절 뒤에 기술한다.
--3)HAVING절의 해석은 WHERE 절과 동일하다.
     다만 그룹 함수를 포함하는 조건은
     HAVING 절에 해야만 한다.

--GROUP BY 절에 따른 그룹 함수 결과 값의 변화

SELECT ROUND(AVG(sal))
  2  FROM emp
  3  GROUP BY dno;

ROUND(AVG(SAL))
---------------
           4070
           2807
           2320
           3000
           2100
           3170

6 rows selected.

SQL> SELECT ROUND(AVG(sal))
  2  FROM emp
  3  GROUP BY job;

ROUND(AVG(SAL))
---------------
           3803
           4800
           2900
           2380
           2490

--부서별 급여 평균이 3천 달러 미만인 부서의 부서번호와 
--평균 급여를 검색하시오.

부서번호, 평균급여

SELECT dno 부서번호, ROUND(AVG(sal)) 평균급여 FROM emp GROUP BY dno HAVING AVG(sal) <3000 ;

부서번호   평균급여
-------- ----------
20             2807
02             2320
40             2100

--개발 업무가 아닌 부서별 인원수를 검색하시오.

 SELECT  dno, COUNT(*) FROM emp GROUP BY dno HAVING dno!=10;
10번부서를 제외한 부서별 인원수

DNO    COUNT(*)
---- ----------
01            3
20            3
02            5
40            1
30            2
HAVING절에는 GROUP BY와 관련된 조건이 들어가야 한다.

SELECT  dno, COUNT(*) FROM emp WHERE job !='개발' GROUP BY dno ;

DNO    COUNT(*)
---- ----------
01            3
20            2
02            5
10            3

1)화학과를 제외하고 과별 학생들의 평점 평균을 검색하시오.

SELECT major,ROUND(AVG(avr)) FROM student GROUP BY major HAVING major!='화학';

MAJOR  ROUND(AVG(AVR))
------ ---------------
식영                 3
생물                 2
유공                 3
물리                 2

SELECT major,ROUND(AVG(avr)) FROM student WHERE major!='화학' GROUP BY major ;

2)화학과를 제외하고 각 학과별 평균 평점중에 평점이 2.0이상인 정보를 검색하시오.


SELECT major,ROUND(AVG(avr)) FROM student WHERE AVG(avr)=2 GROUP BY major HAVING major!='화학';
ERROR at line 1:
ORA-00934: group function is not allowed here

SELECT major,ROUND(AVG(avr)) FROM student WHERE major!='화학' GROUP BY major HAVING AVG(avr)>=2.0;

MAJOR  ROUND(AVG(AVR))
------ ---------------
식영                 3
생물                 2
유공                 3
물리                 2

SELECT major,ROUND(AVG(avr)) FROM student WHERE major!='화학' GROUP BY major HAVING ROUND(AVG(avr))>2.0;

MAJOR  ROUND(AVG(AVR))
------ ---------------
식영                 3
유공                 3

SELECT major,ROUND(AVG(avr)) FROM student GROUP BY major HAVING ROUND(AVG(avr))>2.0 AND major!='화학';

MAJOR  ROUND(AVG(AVR))
------ ---------------
식영                 3
유공                 3

3)기말고사 평균이 60점 이상인 학생의 정보를 검색하시오(학번과 기말고사 평균)
 
SELECT s.sno, sname,ROUND(AVG(result)) "기말고사 평균"
    FROM student s
    JOIN score r ON s.sno= r.sno
    GROUP BY s.sno, sname
    HAVING AVG(result)>=60;

4)강의 학점수가 3학점 이상인 교수의 정보를 검색하시오(교수번호, 이름과 담당 총학점수)

SELECT P.pno, pname,SUM(st_num) "담당 학점"
    FROM professor p
    JOIN course c ON p.pno=c.pno
    GROUP BY p.pno, pname
    HAVING SUM(st_num)>= 3;


--서브 쿼리 -단일 행 서브쿼리
--서브 쿼리는 두개의 쿼리를 결합하여 하나의 문장으로 표현하는 것이다.
--1) 단일 행 서브쿼리
--    서브쿼리가 하나의 컬럼에서 하나의 행을 검색한다.
--2) 다중 행 서브쿼리
--    서브쿼리가 하나의 컬럼에서 여러 개의 행을 검색한다.
--3) 다중 열 서브쿼리
--    서브쿼리가 여러 개의 컬럼을  검색한다.
--4) 서브 쿼리는 WHERE 절, HAVING 절과 같이 조건절에 주소
--    쓰인다. FROM 절에 쓰이는 경우도 있다.

-- SELECT 컬럼,...
-- FROM 테이블
-- WHERE 컬럼<단일 행 연산자>(SELECT 문:Sub Query)
--1)단일 행 연산자가 사용됨으로 반드시 서브쿼리의 결과 값은 1개만 검색되어야 한다.
--2)서브 쿼리는 반드시 괄호로 묶는다.
--3)서브 쿼리는 메인 쿼리 실행 전에 실행된다.
--4)서브 쿼리의 검색된 결과값은 메인 쿼리에 사용된다.
--5)단일 행 연산자 오른쪽에 기술한다.
--   (=,<.>,<=,>=,!=)
--6)WHERE 절에 기술된 열의 숫자와 타입은 
--  SELECT 절과 1:1 대응관계가 되어야 한다.



SQL> INSERT INTO emp VALUES('0302','김연아','여','회계','0301','1991-02-01',3300,0,'02');

1 row created.

SQL> SELECT * FROM emp WHERE ename='김연아';

ENO      ENAME      SEX  JOB    MGR   HDATE             SAL       COMM DNO
-------- ---------- ---- ------ ----- ---------- ---------- ---------- ----
0302     김연아     여   회계   0301  1991/02/01       3300          0 02


--김연아보다 급여를 많이 받는 사원을 검색하시오.
1)김연아의 급여를 검색한다.
SELECT eno,ename,sal FROM emp WHERE ename='김연아';

2)김연아의 급여와 비교하여 더 많이 받는 사원을 검색한다.

SELECT eno,ename,sal FROM emp
  2  WHERE sal>(SELECT sal FROM emp WHERE ename='김연아');

ENO      ENAME             SAL
-------- ---------- ----------
0001     안영희           4800
0201     안영숙           3900
0202     손하늘           3510
0301     이승철           3400
2003     정의찬           4350
0120     김경현           4000


--김연아와 부서가 다르고 동일한 업무를 하는 사원의 정보를 검색하시오.
  (사원번호,사원이름, 부서번호, 업무)

SELECT eno, ename, dno, job FROM emp WHERE dno != (SELECT dno FROM emp WHERE ename='김연아')
  2  AND job = (SELECT job FROM emp WHERE ename='김연아');

ENO      ENAME      DNO  JOB
-------- ---------- ---- ------
0401     김진성     10   회계


--부서 중 가장 급여를 많이 받는 부서를 검색 하시오.
--1)부서중 평균 최대급여 계산
--2)일치하는 부서를 출력


--부산에서 근무하는 사원의 정보를 검색하시오.
(사원번호, 사원명)
SELECT eno, ename FROM emp, dept WHERE emp.dno=dept.dno AND loc='부산';

SELECT eno, ename FROM emp JOIN dept ON emp.dno=dept.dno WHERE loc='부산';

ENO      ENAME
-------- ----------
2002     제갈민
3002     권아현
0120     김경현

SELECT eno,ename
   FROM emp
   WHERE dno = (SELECT dno FROM dept WHERE loc='부산');

서브 쿼리를 사용하세요
1)김형진 보다 평점이 우수한 학생의 학번과 이름을 검색하시오
김형진의 평점을 검색
검색한 평점과 비교하여 더 높은 점수를 가진 학생의 학번과 이름 검색

SELECT sno, sname, avr FROM student WHERE avr>(SELECT avr FROM student WHERE sname='김형진');

2)김형진과 동일한 학년중에 평점이 서찬호와 동일한 학생을 검색하시오.
김형진의 학년 검색
서찬호의 평점 검색

두가지 조건 모두 충족되는 학생 검색

SELECT sno, sname,syear  FROM student WHERE syear=(SELECT syear FROM student WHERE sname='김형진')
  2  AND avr = (SELECT avr FROM student WHERE sname='서찬호');

3)김형진 보다 일반 화학과목의 학점이 더 낮은 학생의 명단을 학점과 함께 검색하시오.
김형진의 일반화학 점수 검색

점수보다 낮은 학생 검색

SELECT student.sno, sname,result FROM student ,score, course 
WHERE student.sno=score.sno AND course.cno=score.cno AND cname='일반화학' 
AND result <(SELECT result FROM student,score,course WHERE student.sno=score.sno 
AND course.cno=score.cno AND cname='일반화학'AND sname='김형진');

SELECT sname,result FROM student s JOIN score r ON s.sno=r.sno JOIN course c ON r.cno=c.cno
    WHERE cname='일반화학'
    AND result <(SELECT result FROM student s JOIN score r ON s.sno=r.sno JOIN course c ON r.cno=c.cno 
     WHERE sname='김형진' AND cname='일반화학');

4)인원수가 가장 많은 학과를 검색하시오.

SELECT major FROM student GROUP BY major HAVING COUNT(*)=(SELECT MAX(COUNT(*)) FROM student
  2  GROUP BY major);

5)학생중 기말고사 성적이 가장 낮은 학생의 정보를 검색하시오.

SELECT s.sno, sname FROM student s JOIN score r ON s.sno=r.sno
    GROUP BY s.sno,sname
    HAVING AVG(result)=(SELECT MIN(AVG(result)) FROM score GROUP BY sno);

SNO      SNAME
-------- ----------
923903   정남윤

--서브 쿼리 -다중 행, 다중 열
--SELECT 컬럼,...
--FROM 테이블
--WHERE 컬럼(다중 행 연산자)(SELECT 문:Sub Query 문)
--1)서브 쿼리에 여러개의 행이 검색되는 쿼리를 
     다중 행 서브 쿼리라고 한다.
--2)다중 행 서브쿼리는 다중 행 연산자를 이용한다.
--3)다중행 연산자의 종류
--    IN : 검색된 값중에 하나만 일치하면 참이다.
--    ANY : 검색된 값중에 조건에 맞는 것이 하나 이상 있으면 참이다.
--    ALL : 모든 검색된 값과 조건에 맞아야 참이다.

--20번 부서원들과 동일한 관리자로 부터 관리받는 사원을 검색하시오.
--1)20번 부서원들의 관리자가 여러명일수 있다.
--2) 서브쿼리의 결과가 몇개일지 예측할 수 없는 경우
      다중 행 연산자를 이용하여 다중행 서브쿼리를 작성한다.

SELECT dno, eno, ename, mgr FROM emp
    WHERE mgr IN (SELECT mgr FROM emp WHERE dno=20) AND dno!=20;

-- 다중 행 연산자와 그룹 함수
-- 다중 행 연산자인 ALL이나 ANY는 다음과 같이
-- 그룹 함수를 이용해서 표현 할 수 있다.
-- ALL : 모두 다 
-- ANY : 모두 중에 하나라도 
-- 컬럼 >ALL => 컬럼 > MAX: 가장 큰 값보다 크다
-- 컬럼 <ALL => 컬럼 < MIN : 가장 작은 값보다 작다
-- 컬럼 >ANY => 컬럼 > MIN : 가장 작은 값보다 크다.
-- 컬럼 <ANY => 컬럼 < MAX : 가장 큰 값보다 작다.

--20번 부서원들과 보너스가 같은 사원을 검색하시오.

SELECT dno,eno,ename,comm FROM emp 
WHERE comm IN (SELECT comm FROM emp WHERE dno=20)AND dno!=20;

--각 부서별로 최소 급여를 받는 사원의 정보를 검색하시오.
--(이름, 급여)
SELECT dno,ename,sal FROM emp WHERE (dno,sal) IN (SELECT dno, MIN(sal) FROM emp GROUP BY dno);

DNO  ENAME             SAL
---- ---------- ----------
01   손하늘           3510
20   제갈민           1520
30   이초록           1989
02   김선유            900
10   권나현           2600
40   손연아           1100
40   최연아           1100

다중행/다중열 서브쿼리로 해결하세요.
1.화학과 학생의 평점이 동일한 학생들을 검색하시오.
화학과 학생의 평점
평점이 같은 학생 검색
SELECT sno,sname,major,avr FROM student WHERE AVR IN (SELECT avr FROM student WHERE major='화학')
  2  AND major !='화학';

2.화학과 교수와 부임일이 같은 사원을 검색하시오.
SELECT eno,ename,hdate FROM emp WHERE hdate IN (SELECT hiredate FROM professor WHERE section='화학');

ENO      ENAME      HDATE
-------- ---------- ----------
0201     안영숙     1991/02/01

3.화학과 학생과 같은 학년에서 평점이 동일한 학생들을 검색하시오.
화학과 학생과 같은 학년 학생
평점이 동일한 학생

SELECT sname, major,syear, avr FROM student WHERE (syear,avr) IN (SELECT syear,avr FROM student
  2  WHERE major='화학')AND major !='화학';

4. 10번 부서 사원들과 연봉이 동일한 사원을 검색하시오.

SELECT ename,dno, sal*12+NVL(comm,0) sal12  FROM emp WHERE sal*12+NVL(comm,0) IN (SELECT sal*12+NVL(comm,0) FROM emp
  2  WHERE dno='10')AND dno!='10';

5. 기말고사 성적이 핵 화학 과목보다 우수한 과목의 과목명과 담당교수명을 검색하시오.

SELECT cname,pname,AVG(result)
    FROM score c JOIN course r ON c.cno=r.cno JOIN professor p ON p.pno=r.pno GROUP BY cname,pname 
    HAVING AVG(result) > (SELECT AVG(result)FROM score c JOIN course r ON c.cno=r.cno 
    WHERE cname='핵화학' GROUP BY cname);

SELECT cname,pname,AVG(result)
    FROM score c JOIN course r ON c.cno=r.cno JOIN professor p ON p.pno=r.pno  WHERE
    AVG(result) > (SELECT AVG(result)FROM score c JOIN course r ON c.cno=r.cno 
    WHERE cname='핵화학' GROUP BY cname)GROUP BY cname,pname;

WHERE AVG(result)>(SELECT AVG(result)FROM score c JOIN course r ON c.cno=r.cno WHERE cname='핵화학'
      *
ERROR at line 3:
ORA-00934: group function is not allowed here

핵화학 과목 점수는 하나인데 우수한 과목 점수는 여러개여서
해빙절 사용해서 해결(아니면 group 조건을 cname,pname추가해서 인지 모름)

6. 10번 부서 사원들과 급여 및 연봉이 동일한 사원들 검색하시오.

SELECT ename,dno,sal,sal*12+NVL(comm,0) FROM emp WHERE (sal,sal*12+NVL(comm,0)) IN
  2  (SELECT sal,sal*12+NVL(comm,0) FROM emp WHERE dno='10')AND dno!='10';

동일한 사원이 없음

SELECT ename,dno,sal,sal*12+NVL(comm,0) FROM emp WHERE (sal,sal*12+NVL(comm,0)) IN
  2  (SELECT sal,sal*12+NVL(comm,0) FROM emp WHERE dno='10');

ENAME      DNO         SAL SAL*12+NVL(COMM,0)
---------- ---- ---------- ------------------
김선유     10         3200              38700
권나현     10         2600              33100
김진성     10         3200              39400
권준영     10         5000              62000

--DML(Data Maniuplation Language)란?
--데이터베이스에 데이터를 입력, 수정, 삭제하는 명령이다.
--SELECT 문과는 다르게 데이터베이스의 내용을 변경하는 
-- 작업을 수행함으로 SELECT 문에 비해서 훨신 주의깊게 
--계획되고 실행되어야 한다.
--이렇게 DML 작업은 이전과는 달리 안전한 작업과정과
--결과가 요구됨으로 이를 위해 오라클은 DML 작업을
--트랜잭션이라는 단위로 관리한다.


--INSERT, UPDATE, DELETE

--INSERT, INTO 테이블 [(컬럼,컬럼,...)]
--VALUES (값,값,...);
--1)INSERT 문은 하나의 행만을 삽입한다.
--2)컬럼리스트와 VALUE 절의 값은 반드시 1:1로 대응된다.
--3)테이블의 모든 컬럼에 값을 입력하는 경우 컬럼 리스트를 생략할 수 있다.
-- VALUE 절에 기술하는 값의 순서는 DESC 명령으로 확인된 테이블의 컬럼 순서와 일치해야 한다.
--4)입력되는 값이 숫자가 아닌 경우 반드시 단일 인용부호를 사용한다.
--5)INSERT 문장에서 생략된 컬럼은 NULL 값이 입력된다.
--6)명시적은 NULL 값은 NULL을 기술한다.
--7)값 대신 DEFAULT를 기술하면 DEFAULT 값이 입력된다.

--UPDATE 테이블
--SET 컬럼=값, 컬럼=값,...
--[WHERE 조건]
--1)컬럼의 값을 수정한다.
--2)WHERE 절을 생략하면 모든 행의 지정된 컬럼 값이 수정된다.
--3)여러 컬럼의 값을 동시에 수정 할 수 있다.
--4)값 대신 DEFAULT를 기술하면 테이블에 정의된 DEFAULT값으로 변경된다.

--DELETE FROM 테이블
--[WHERE 조건];
--1) 행단위로 데이터를 삭제한다.
--2) 조건이 없는 경우 테이블의 모든 행을 삭제한다.
--3) 테이블을 삭제해도 테이블의 물리적인 구조는 변하지 않는다.


--DCL (Data Control Language)
--; COMMIT, ROLLBACK
--COMMIT
--1) 작업을 완료한다.
--2) 모든 DML 문장을 수행한 후 작업을 완료할 때 반드시 필요하다.

--ROLLBACK;
--1) 작업을 취소한다.
--2) 모든 DML 문장을 수행한 후 작업을 취소할 때 반드시 필요하다.

INSERT INTO EMP (ENO,ENAME,HDATE)
  2  VALUES('1912','모모',TO_DATE('2020-08-10:07:15:22','YYYY-MM-DD:HH24:MI:SS'));

SELECT ENO,ENAME,TO_CHAR(HDATE,'YYYY-MM-DD:HH24:MI:SS')
  2  FROM EMP;




































  












































































































